#!/bin/bash

# –ì–ª—é—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Ö–∞–∫-—ç–∫—Ä–∞–Ω
clear
tput civis  # —Å–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä

glitch_lines=(
"Œû –ó–∞–ø—É—Å–∫ –∫–∏–±–µ—Ä–¥–µ–∫ —è–¥—Ä–∞... [–Ω—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ]"
"Œû –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤... [–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –æ—Ç–∫—É–¥–∞ –æ–Ω–∏]"
"Œû –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é... [–Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è]"
"Œû –ü–æ–¥–º–µ–Ω–∞ MAC-–∞–¥—Ä–µ—Å–∞... ok [—Ç–µ–ø–µ—Ä—å —è - –ø—Ä–∏–Ω—Ç–µ—Ä HP]"
"Œû –†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–ª–∞–π–Ω–æ–≤... ok [–Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ]"
"Œû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–π... [–ø—Ä–∏—Ü–µ–ª –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω]"
"Œû –í—ã–ø—É—Å–∫ –¥—Ä–æ–Ω–æ–≤ SIGINT... [–≤—ã—à–ª–∏ —á–µ—Ä–µ–∑ Wi-Fi —Å–æ—Å–µ–¥–∞]"
"Œû –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–∏–±–µ—Ä–≤–æ–π–Ω—ã... [–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ª–∞–∑–µ—Ä–Ω—É—é —É–∫–∞–∑–∫—É]"
"Œû ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë [10%] –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ñ–µ–∏–Ω–∞"
"Œû ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë [42%] —Ç–µ—Ä—è–µ—Ç—Å—è —Å–≤—è–∑—å —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é"
"Œû ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë [76%] —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å darknet"
"Œû ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà [100%] —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —á–µ–ª–æ–≤–µ–∫"
)

for line in "${glitch_lines[@]}"; do
  echo -ne "\e[1;32m$line\e[0m\n" | lolcat
  sleep 0.25
done

echo ""
echo -ne "\e[1;35m‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\e[0m\n"
echo -ne "\e[1;35m‚îÇ \e[0m\e[1;36m   HACK MODULE LOADED :: WELCOME, OPERATIVE.   \e[0m\e[1;35m      ‚îÇ\e[0m\n"
echo -ne "\e[1;35m‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\e[0m\n"
sleep 1

# üíÄ –ú–∞–ª–µ–Ω—å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –≥–ª—é–∫–∞ + –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞
for i in {1..30}; do
    echo -ne "\e[32m$(head /dev/urandom | tr -dc 'A-Za-z0-9!@#$%^&*_?' | head -c $((RANDOM % 28 + 12)))\r\e[0m"
    sleep 0.05
done

sleep 0.3

# –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ AKUMA –∏–∑ "—à—É–º–∞"
nickname="AKUMA"
for ((i=0; i<${#nickname}; i++)); do
    echo -ne "\e[1;31m${nickname:$i:1}\e[0m"
    sleep 0.2
done

echo -e "\n"

# üí° –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Å —à—É—Ç–∫–æ–π
echo -e "\nüíÄ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω. –ï—Å–ª–∏ —á—Ç–æ ‚Äî —ç—Ç–æ –Ω–µ –º—ã."
echo -e "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ç—Ä–∏—Ü—É, \e[1;32m$nickname\e[0m... –£ –Ω–∞—Å —Ç—É—Ç sudo –∏ –ø–µ—á–µ–Ω—å–∫–∏ üç™."


tput cnorm  # –≤–µ—Ä–Ω—É—Ç—å –∫—É—Ä—Å–æ—Ä
echo -e "\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_DIR/log.log"
}

# === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===
log "‚ñ∂ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
apt update && apt upgrade -y nmap
cd ~/WhatWeb && git pull
GO111MODULE=on go install github.com/jaeles-project/jaeles@latest
nuclei -update
cd ~
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
if ! command -v whatweb &> /dev/null; then
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é WhatWeb..."
    apt install -y whatweb
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Jaeles
log "‚ñ∂ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Jaeles..."
echo "export PATH=\$PATH:\$HOME/go/bin" >> ~/.bashrc
source ~/.bashrc
jaeles config init >> "$LOG_DIR/log.log" 2>&1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while getopts "f:" opt; do
  case $opt in
    f) target_file="$OPTARG" ;;
    *) echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 -f <—Ñ–∞–π–ª —Å —Ü–µ–ª—è–º–∏>"; exit 1 ;;
  esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —Ü–µ–ª—è–º–∏
if [ -z "$target_file" ]; then
  log "–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Å —Ü–µ–ª—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -f <—Ñ–∞–π–ª>"
  exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
DATE=$(date +%d-%m-%Y)
DATE2=$(date '+%c')
LOG_DIR="/root/web_scan/$DATE-vnu"
mkdir -p "$LOG_DIR"
cd "$LOG_DIR" || exit 1

# –ù–∞—á–∞–ª–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log "=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ==="
log "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $LOG_DIR"
log "–§–∞–π–ª —Å —Ü–µ–ª—è–º–∏: $target_file"

# –ü–∏–Ω–≥-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
log "‚ñ∂ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∏–Ω–≥-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (nmap)..."
nmap -sn -iL "$target_file" -oG ping_result.txt >> "$LOG_DIR/log.log" 2>&1
grep "Up" ping_result.txt | awk '{print $2}' > target_raw.txt

# –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö IP –∏–∑ —Å–ø–∏—Å–∫–∞
EXCLUDE_IPS=(
    "192.168.12.190" "192.168.13.12" "192.168.13.122" "192.168.13.130" "192.168.13.162"
    "192.168.13.74" "192.168.14.157" "192.168.15.94" "192.168.14.69" "192.168.13.7"
    "192.168.13.84" "192.168.64.21" "192.168.74.55" "192.168.75.41" "192.168.74.21"
    "192.168.180.34" "192.168.74.33" "192.168.74.37" "192.168.75.37" "192.168.13.62"
    "192.168.74.36" "192.168.74.31" "10.200.10.15" "192.168.13.62" "10.200.14.13"
    "192.168.74.28" "10.200.12.16" "192.168.12.239" "192.168.180.12" "192.168.12.203"
    "192.168.13.106" "192.168.13.172" "192.168.12.241" "192.168.13.117" "192.168.15.94"
    "10.0.50.16" "192.168.74.11" "10.200.13.13" "192.168.14.18" "192.168.12.194"
    "10.200.9.13" "192.168.13.22" "192.168.74.38" "192.168.75.42" "192.168.13.176"
    "192.168.13.78" "10.0.74.250" "10.0.74.251" "10.0.74.252" "192.168.13.72"
)
grep -v -F -f <(printf "%s\n" "${EXCLUDE_IPS[@]}") target_raw.txt > target.txt

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
if [ ! -s target.txt ]; then
    log "‚ùå –û—à–∏–±–∫–∞: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–æ–≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø—É—Å—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É."
    exit 1
fi

TARGETS=$(tr '\n' ' ' < target.txt)

# –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ nmap
log "‚ñ∂ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (nmap)..."
nmap -p- -sV -Pn --script=http-title,ssl-cert \
     --min-rate 500 --max-rate 1000 \
     --min-parallelism 10 --max-parallelism 50 \
     --max-rtt-timeout 300ms --min-rtt-timeout 100ms \
     --max-retries 2 --open -oA "$LOG_DIR/nmap_result" \
     $TARGETS >> "$LOG_DIR/log.log" 2>&1

log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ [$DATE2]"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ gnmap –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
if [ ! -s "$LOG_DIR/nmap_result.gnmap" ]; then
    log "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª nmap_result.gnmap –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É."
    exit 1
fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ nmap –¥–ª—è Grafana
log "‚ñ∂ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ nmap –¥–ª—è Grafana..."
cp "$LOG_DIR/nmap_result.xml" /root/nmap-did-what/data/ >> "$LOG_DIR/log.log" 2>&1

# –ó–∞–ø—É—Å–∫ Grafana
log "‚ñ∂ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Grafana..."
cd /root/nmap-did-what/grafana-docker
docker-compose up -d >> "$LOG_DIR/log.log" 2>&1
log "Grafana –∑–∞–ø—É—â–µ–Ω–∞."

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –¥–ª—è Grafana
log "‚ñ∂ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Grafana..."
cd /root/nmap-did-what/data/
python3 nmap-to-sqlite.py nmap_result.xml >> "$LOG_DIR/log.log" 2>&1

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
log "‚ñ∂ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
grep "Ports:" "$LOG_DIR/nmap_result.gnmap" | awk -F"[ /]" '{split($0, a, "Ports: "); split(a[2], ports, ", "); for (i in ports) { split(ports[i], p, "/"); print $2":"p[1]; }}' > "$LOG_DIR/open_ports.txt"
log "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ open_ports.txt"

# –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
cd $LOG_DIR/

# –ü–æ–∏—Å–∫ web-—Å–µ—Ä–≤–∏—Å–æ–≤ httpx
log "‚ñ∂ –ü–æ–∏—Å–∫ web-—Å–µ—Ä–≤–∏—Å–æ–≤ (httpx)..."
httpx -l "open_ports.txt" -o "httpx_result.txt" >> "$LOG_DIR/log.log" 2>&1
log "–ü–æ–∏—Å–∫ web-—Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω."

# –ó–∞–ø—É—Å–∫ WhatWeb
log "‚ñ∂ –ó–∞–ø—É—Å–∫ WhatWeb..."
mkdir -p "whatweb_result"
while read -r url; do
    clean_url=$(echo "$url" | sed "s/^http[s]*:\/\///" | sed "s/:/_/g")
    whatweb "$url" > "whatweb_result/$clean_url.html"
done < "httpx_result.txt"
log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ WhatWeb –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bitrix24
log "‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bitrix24..."
mkdir -p "bitrix_targets"
while read -r url; do
    if whatweb "$url" 2>/dev/null | grep -qi "Bitrix"; then
        echo "$url" >> bitrix_targets/bitrix_sites.txt
    fi
done < "httpx_result.txt"
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bitrix24 –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

# –ó–∞–ø—É—Å–∫ Nuclei
log "‚ñ∂ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ Nuclei..."
nuclei -l "open_ports.txt" -o "nuclei_result.txt" -t /root/nuclei-templates >> "$LOG_DIR/log.log" 2>&1
log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."

# –ó–∞–ø—É—Å–∫ Nuclei –¥–ª—è Bitrix24
echo "‚ñ∂ –ó–∞–ø—É—Å–∫ Nuclei —Å —à–∞–±–ª–æ–Ω–∞–º–∏ Bitrix..."
if [ -s "bitrix_targets/bitrix_sites.txt" ]; then
    nuclei -l "bitrix_targets/bitrix_sites.txt" -o "nuclei_bitrix_result.txt" -t /root/nuclei-templates-bitrix/
fi
echo "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Bitrix –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

# –ó–∞–ø—É—Å–∫ Jaeles
log "‚ñ∂ –ó–∞–ø—É—Å–∫ Jaeles..."
jaeles scan -U "$LOG_DIR/httpx_result.txt" -S /root/.jaeles/base-signatures/ > "jaeles_result.txt" 2>> "$LOG_DIR/log.log"
log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Jaeles –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
log "‚ñ∂ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏..."
grep -iR 'critical' "nuclei_result.txt" > "critical.txt"
grep -iR 'high' "nuclei_result.txt" > "high.txt"
grep -iR 'medium' "nuclei_result.txt" > "medium.txt"
grep -iR 'critical' "jaeles_result.txt" >> "critical.txt"
grep -iR 'high' "jaeles_result.txt" >> "high.txt"
grep -iR 'medium' "jaeles_result.txt" >> "medium.txt"
log "–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã."

# –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –æ—Ç—á–µ—Ç–∞—Ö
log "‚ñ∂ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –æ—Ç—á–µ—Ç–∞—Ö..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π
deduplicate_file() {
    local file=$1
    if [ -f "$file" ]; then
        sort -u "$file" -o "$file"
        log "–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª $file (—É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: $(( $(wc -l < "$file".tmp) - $(wc -l < "$file") ))"
    fi
}

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
deduplicate_file "medium.txt"
deduplicate_file "high.txt"
deduplicate_file "critical.txt"
deduplicate_file "nuclei_result.txt"
deduplicate_file "jaeles_result.txt"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
log "‚ñ∂ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
awk '!seen[$0]++' nuclei_result.txt > nuclei_result_unique.txt && mv nuclei_result_unique.txt nuclei_result.txt
awk '!seen[$0]++' jaeles_result.txt > jaeles_result_unique.txt && mv jaeles_result_unique.txt jaeles_result.txt

log "–î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ html –æ—Ç—á–µ—Ç–∞ Jaeles.

jaeles report -o "$LOG_DIR/out" --title 'Verbose Report $DATE'

log "=== –í—Å–µ —ç—Ç–∞–ø—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ==="
