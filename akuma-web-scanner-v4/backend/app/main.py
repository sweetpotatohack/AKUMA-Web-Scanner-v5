"""
AKUMA WEB SCANNER - Backend API
Legendary Cyberpunk Vulnerability Scanner with Web Interface
By AKUMA & –§–µ–Ω—è - The Cyber Gods üî•üíÄ
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from typing import List, Dict, Any, Optional
import asyncio
import json
import uuid
import logging
from datetime import datetime, timedelta
import os
from pathlib import Path

from .database import get_db, engine
from .models import Base, ScanJob, Vulnerability, Target, User
from .schemas import (
    ScanJobCreate, ScanJobResponse, VulnerabilityResponse,
    TargetCreate, TargetResponse, UserCreate, UserResponse,
    ScanConfig, ScanStats
)
from .auth import create_access_token, verify_password, get_current_user, hash_password
from .scanner_engine import AkumaScannerEngine
from .celery_app import celery_app
from .websocket_manager import ConnectionManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AKUMA Web Scanner",
    description="üî• Legendary Cyberpunk Vulnerability Scanner üî•",
    version="3.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î
Base.metadata.create_all(bind=engine)

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
manager = ConnectionManager()

# Security
security = HTTPBearer()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== AUTHENTICATION ====================

@app.post("/api/auth/register", response_model=UserResponse)
async def register(user: UserCreate, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User with this email already exists"
        )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = hash_password(user.password)
    db_user = User(
        email=user.email,
        username=user.username,
        hashed_password=hashed_password,
        is_active=True
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    
    logger.info(f"üéâ New user registered: {user.email}")
    return db_user

@app.post("/api/auth/login")
async def login(email: str, password: str, db: Session = Depends(get_db)):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.email == email).first()
    if not user or not verify_password(password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials"
        )
    
    access_token = create_access_token(data={"sub": user.email})
    logger.info(f"üîê User logged in: {email}")
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": {
            "id": user.id,
            "email": user.email,
            "username": user.username
        }
    }

# ==================== SCAN MANAGEMENT ====================

@app.post("/api/scans", response_model=ScanJobResponse)
async def create_scan(
    scan_job: ScanJobCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω-–∑–∞–¥–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω –≤ –ë–î
    db_scan = ScanJob(
        name=scan_job.name,
        description=scan_job.description,
        targets=json.dumps(scan_job.targets),
        scan_config=json.dumps(scan_job.config.dict()) if scan_job.config else "{}",
        user_id=current_user.id,
        status="pending"
    )
    db.add(db_scan)
    db.commit()
    db.refresh(db_scan)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω —á–µ—Ä–µ–∑ Celery
    task = celery_app.send_task(
        'scanner.run_scan',
        args=[db_scan.id, scan_job.targets, scan_job.config.dict() if scan_job.config else {}]
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º task_id –≤ –ë–î
    db_scan.task_id = task.id
    db.commit()
    
    logger.info(f"üöÄ New scan created: {db_scan.id} by {current_user.email}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    await manager.broadcast({
        "type": "scan_created",
        "scan_id": db_scan.id,
        "message": f"Scan '{scan_job.name}' created and queued"
    })
    
    return db_scan

@app.get("/api/scans", response_model=List[ScanJobResponse])
async def get_scans(
    skip: int = 0,
    limit: int = 100,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    scans = db.query(ScanJob)\
        .filter(ScanJob.user_id == current_user.id)\
        .offset(skip)\
        .limit(limit)\
        .all()
    return scans

@app.get("/api/scans/{scan_id}", response_model=ScanJobResponse)
async def get_scan(
    scan_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞–Ω–µ"""
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    return scan

@app.delete("/api/scans/{scan_id}")
async def delete_scan(
    scan_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∞"""
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if scan.task_id and scan.status in ["running", "pending"]:
        celery_app.control.revoke(scan.task_id, terminate=True)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    db.delete(scan)
    db.commit()
    
    logger.info(f"üóëÔ∏è Scan deleted: {scan_id} by {current_user.email}")
    
    return {"message": "Scan deleted successfully"}

@app.post("/api/scans/{scan_id}/stop")
async def stop_scan(
    scan_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ—Å—è —Å–∫–∞–Ω–∞"""
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    if scan.status not in ["running", "pending"]:
        raise HTTPException(status_code=400, detail="Scan is not running")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
    if scan.task_id:
        celery_app.control.revoke(scan.task_id, terminate=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    scan.status = "stopped"
    scan.finished_at = datetime.utcnow()
    db.commit()
    
    logger.info(f"‚èπÔ∏è Scan stopped: {scan_id} by {current_user.email}")
    
    await manager.broadcast({
        "type": "scan_stopped",
        "scan_id": scan_id,
        "message": f"Scan '{scan.name}' stopped by user"
    })
    
    return {"message": "Scan stopped successfully"}

# ==================== VULNERABILITIES ====================

@app.get("/api/scans/{scan_id}/vulnerabilities", response_model=List[VulnerabilityResponse])
async def get_vulnerabilities(
    scan_id: int,
    severity: Optional[str] = None,
    skip: int = 0,
    limit: int = 100,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–∫–∞–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∫–∞–Ω—É
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    # –ó–∞–ø—Ä–æ—Å —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    query = db.query(Vulnerability).filter(Vulnerability.scan_id == scan_id)
    
    if severity:
        query = query.filter(Vulnerability.severity == severity)
    
    vulnerabilities = query.offset(skip).limit(limit).all()
    return vulnerabilities

@app.get("/api/vulnerabilities/{vuln_id}", response_model=VulnerabilityResponse)
async def get_vulnerability(
    vuln_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
    vuln = db.query(Vulnerability)\
        .join(ScanJob)\
        .filter(Vulnerability.id == vuln_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return vuln

# ==================== REPORTS ====================

@app.get("/api/scans/{scan_id}/report/html")
async def get_html_report(
    scan_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
    report_path = f"/app/scan_results/{scan_id}/turbo_cyber_report.html"
    
    if os.path.exists(report_path):
        return FileResponse(
            report_path,
            media_type="text/html",
            filename=f"akuma_scan_{scan_id}_report.html"
        )
    else:
        raise HTTPException(status_code=404, detail="Report not found")

@app.get("/api/scans/{scan_id}/report/json")
async def get_json_report(
    scan_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞"""
    scan = db.query(ScanJob)\
        .filter(ScanJob.id == scan_id, ScanJob.user_id == current_user.id)\
        .first()
    
    if not scan:
        raise HTTPException(status_code=404, detail="Scan not found")
    
    # –ü–æ–ª—É—á–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    vulnerabilities = db.query(Vulnerability)\
        .filter(Vulnerability.scan_id == scan_id)\
        .all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        "total_vulnerabilities": len(vulnerabilities),
        "critical": len([v for v in vulnerabilities if v.severity == "critical"]),
        "high": len([v for v in vulnerabilities if v.severity == "high"]),
        "medium": len([v for v in vulnerabilities if v.severity == "medium"]),
        "low": len([v for v in vulnerabilities if v.severity == "low"]),
        "info": len([v for v in vulnerabilities if v.severity == "info"])
    }
    
    return {
        "scan": {
            "id": scan.id,
            "name": scan.name,
            "status": scan.status,
            "created_at": scan.created_at,
            "finished_at": scan.finished_at,
            "targets": json.loads(scan.targets)
        },
        "statistics": stats,
        "vulnerabilities": [
            {
                "id": v.id,
                "title": v.title,
                "severity": v.severity,
                "target": v.target,
                "description": v.description,
                "proof_of_concept": v.proof_of_concept,
                "recommendation": v.recommendation,
                "cvss_score": v.cvss_score,
                "cve_id": v.cve_id
            } for v in vulnerabilities
        ]
    }

# ==================== FILE UPLOAD ====================

@app.post("/api/uploads/targets")
async def upload_targets_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ü–µ–ª—è–º–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not file.filename.endswith(('.txt', '.csv')):
        raise HTTPException(
            status_code=400,
            detail="Only .txt and .csv files are supported"
        )
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    content = await file.read()
    targets = []
    
    try:
        lines = content.decode('utf-8').split('\n')
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                targets.append(line)
    except UnicodeDecodeError:
        raise HTTPException(status_code=400, detail="Invalid file encoding")
    
    logger.info(f"üìÅ File uploaded: {file.filename}, {len(targets)} targets by {current_user.email}")
    
    return {
        "filename": file.filename,
        "targets_count": len(targets),
        "targets": targets[:100]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    }

# ==================== STATISTICS ====================

@app.get("/api/dashboard/stats")
async def get_dashboard_stats(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_scans = db.query(ScanJob)\
        .filter(ScanJob.user_id == current_user.id)\
        .count()
    
    completed_scans = db.query(ScanJob)\
        .filter(ScanJob.user_id == current_user.id, ScanJob.status == "completed")\
        .count()
    
    running_scans = db.query(ScanJob)\
        .filter(ScanJob.user_id == current_user.id, ScanJob.status == "running")\
        .count()
    
    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏
    total_vulns = db.query(Vulnerability)\
        .join(ScanJob)\
        .filter(ScanJob.user_id == current_user.id)\
        .count()
    
    critical_vulns = db.query(Vulnerability)\
        .join(ScanJob)\
        .filter(ScanJob.user_id == current_user.id, Vulnerability.severity == "critical")\
        .count()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–Ω—ã
    recent_scans = db.query(ScanJob)\
        .filter(ScanJob.user_id == current_user.id)\
        .order_by(ScanJob.created_at.desc())\
        .limit(5)\
        .all()
    
    return {
        "total_scans": total_scans,
        "completed_scans": completed_scans,
        "running_scans": running_scans,
        "total_vulnerabilities": total_vulns,
        "critical_vulnerabilities": critical_vulns,
        "recent_scans": [
            {
                "id": scan.id,
                "name": scan.name,
                "status": scan.status,
                "created_at": scan.created_at,
                "targets_count": len(json.loads(scan.targets))
            } for scan in recent_scans
        ]
    }

# ==================== WEBSOCKET ====================

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    """WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await manager.connect(websocket, client_id)
    try:
        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.get("type") == "ping":
                await websocket.send_text(json.dumps({"type": "pong"}))
            elif message.get("type") == "subscribe_scan":
                scan_id = message.get("scan_id")
                await manager.add_to_room(client_id, f"scan_{scan_id}")
                
    except WebSocketDisconnect:
        manager.disconnect(client_id)

# ==================== HEALTH CHECK ====================

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "version": "3.0",
        "timestamp": datetime.utcnow(),
        "services": {
            "database": "connected",
            "redis": "connected",
            "celery": "running"
        }
    }

# ==================== STARTUP EVENT ====================

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üî• AKUMA Web Scanner started! üî•")
    logger.info("üöÄ Ready to hack the matrix! üíÄ")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("üëã AKUMA Web Scanner shutting down...")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
