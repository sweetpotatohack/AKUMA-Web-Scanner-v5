#!/usr/bin/env python3
"""
AKUMA Enhanced Scanner v5.0 FIXED - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
"""

import asyncio
import json
import logging
import os
import subprocess
import uuid
import xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path
import requests
import shutil

class AKUMAEnhancedScannerV5Fixed:
    def __init__(self):
        self.logger = self._setup_logging()
        self.scan_id = str(uuid.uuid4())[:8]
        self.results_dir = Path("/tmp/akuma_results")
        self.results_dir.mkdir(exist_ok=True)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Grafana
        self.grafana_data_dir = Path("/root/nmap-did-what/data")
        self.grafana_data_dir.mkdir(parents=True, exist_ok=True)
        
        self.tools = {
            'nmap': '/usr/bin/nmap'
        }
        
        self.vulnerabilities = []
        self.scan_stats = {
            'start_time': datetime.now().isoformat(),
            'tools_used': [],
            'grafana_integration': False,
            'webhook_generated': False
        }

    def _setup_logging(self):
        logging.basicConfig(level=logging.INFO, 
                          format='%(asctime)s - %(levelname)s - %(message)s')
        return logging.getLogger('AKUMAScanner_v5_Fixed')

    async def generate_webhook_url(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è webhook URL"""
        try:
            self.logger.info("üîó –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º webhook URL...")
            response = requests.post('https://webhook.site/token', timeout=10)
            if response.status_code == 201:
                data = response.json()
                webhook_uuid = data['uuid']
                webhook_url = f"https://webhook.site/{webhook_uuid}"
                self.scan_stats['webhook_generated'] = True
                self.logger.info(f"‚úÖ Webhook —Å–æ–∑–¥–∞–Ω: {webhook_url}")
                return webhook_url
            else:
                webhook_url = "https://webhook.site/fallback-endpoint"
                self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback webhook URL")
                return webhook_url
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook: {e}")
            return "https://webhook.site/fallback-endpoint"

    async def scan_target(self, target: str) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: {target}")
        
        results = {
            'target': target,
            'scan_id': self.scan_id,
            'start_time': datetime.now().isoformat(),
            'vulnerabilities': [],
            'ports': [],
            'services': [],
            'grafana_integration': False,
            'webhook_info': {}
        }

        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º webhook
            webhook_url = await self.generate_webhook_url()
            results['webhook_info'] = {
                'url': webhook_url,
                'generated_at': datetime.now().isoformat()
            }
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.logger.info("üì° –ó–∞–ø—É—Å–∫–∞–µ–º Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            nmap_results = await self._run_nmap_scan_fixed(target)
            results['ports'] = nmap_results.get('ports', [])
            results['services'] = nmap_results.get('services', [])
            
            # 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Grafana
            if await self._integrate_with_grafana_fixed():
                results['grafana_integration'] = True
                self.scan_stats['grafana_integration'] = True
                self.logger.info("üìä Grafana –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            results['end_time'] = datetime.now().isoformat()
            results['scan_stats'] = self.scan_stats
            
            self.logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            results['error'] = str(e)
            return results

    async def _run_nmap_scan_fixed(self, target: str) -> dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        self.scan_stats['tools_used'].append('nmap')
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
        grafana_xml_path = self.grafana_data_dir / "nmap_result.xml"
        local_xml_path = self.results_dir / f"nmap_{self.scan_id}.xml"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.grafana_data_dir.mkdir(parents=True, exist_ok=True)
        
        # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        nmap_cmd = [
            self.tools['nmap'],
            '-sV', '-Pn', '--top-ports=1000',
            '--max-rate=2000',
            '--host-timeout=300s',
            '-oX', str(grafana_xml_path),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è Grafana
            target
        ]
        
        try:
            self.logger.info(f"‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º Nmap –¥–ª—è {target}")
            self.logger.info(f"üìÑ XML –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {grafana_xml_path}")
            
            process = await asyncio.create_subprocess_exec(
                *nmap_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if grafana_xml_path.exists():
                file_size = grafana_xml_path.stat().st_size
                self.logger.info(f"üìÑ Nmap XML —Å–æ–∑–¥–∞–Ω: {grafana_xml_path} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
                
                if file_size > 0:
                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    shutil.copy2(grafana_xml_path, local_xml_path)
                    return self._parse_nmap_xml(str(local_xml_path))
                else:
                    self.logger.warning("‚ö†Ô∏è Nmap XML —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
                    return {'ports': [], 'services': []}
            else:
                self.logger.warning("‚ö†Ô∏è Nmap XML —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return {'ports': [], 'services': []}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {'ports': [], 'services': []}

    async def _integrate_with_grafana_fixed(self) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Grafana"""
        try:
            grafana_xml_path = self.grafana_data_dir / "nmap_result.xml"
            
            self.logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è Grafana...")
            self.logger.info(f"üìÑ XML —Ñ–∞–π–ª: {grafana_xml_path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {grafana_xml_path.exists()})")
            
            if not grafana_xml_path.exists():
                self.logger.warning("‚ö†Ô∏è nmap_result.xml –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Grafana")
                return False
                
            if grafana_xml_path.stat().st_size == 0:
                self.logger.warning("‚ö†Ô∏è nmap_result.xml –ø—É—Å—Ç–æ–π")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            converter_script = self.grafana_data_dir / "nmap-to-sqlite.py"
            if not converter_script.exists():
                self._create_basic_converter()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            self.logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º nmap —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ SQLite...")
            
            process = await asyncio.create_subprocess_exec(
                'python3', str(converter_script),
                cwd=str(self.grafana_data_dir),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                self.logger.info("‚úÖ Grafana –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                if stdout:
                    self.logger.info(f"–í—ã–≤–æ–¥: {stdout.decode()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
                db_path = self.grafana_data_dir / "nmap_results.db"
                if db_path.exists():
                    db_size = db_path.stat().st_size
                    self.logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Grafana: {db_path} (—Ä–∞–∑–º–µ—Ä: {db_size} –±–∞–π—Ç)")
                    return True
                    
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∫–æ–¥: {process.returncode})")
            if stderr:
                self.logger.error(f"Stderr: {stderr.decode()}")
            return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Grafana: {e}")
            return False

    def _create_basic_converter(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä"""
        converter_content = '''#!/usr/bin/env python3
import sqlite3
import xml.etree.ElementTree as ET
from pathlib import Path

def convert_nmap_to_sqlite():
    xml_file = Path("nmap_result.xml")
    db_file = Path("nmap_results.db")
    
    if not xml_file.exists():
        print("nmap_result.xml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        conn = sqlite3.connect(str(db_file))
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS scans (
                id INTEGER PRIMARY KEY,
                start_time TEXT,
                command_line TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS hosts (
                id INTEGER PRIMARY KEY,
                scan_id INTEGER,
                ip TEXT,
                hostname TEXT,
                status TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ports (
                id INTEGER PRIMARY KEY,
                host_id INTEGER,
                port INTEGER,
                protocol TEXT,
                state TEXT,
                service TEXT,
                version TEXT
            )
        """)
        
        tree = ET.parse(str(xml_file))
        root = tree.getroot()
        
        cursor.execute("INSERT INTO scans (start_time, command_line) VALUES (?, ?)",
                      (root.get('start'), root.get('args', '')))
        scan_id = cursor.lastrowid
        
        for host in root.findall('host'):
            address = host.find('address')
            if address is not None:
                ip = address.get('addr')
                
                status_elem = host.find('status')
                status = status_elem.get('state') if status_elem is not None else 'unknown'
                
                cursor.execute("INSERT INTO hosts (scan_id, ip, hostname, status) VALUES (?, ?, ?, ?)",
                              (scan_id, ip, '', status))
                host_id = cursor.lastrowid
                
                ports_elem = host.find('ports')
                if ports_elem is not None:
                    for port in ports_elem.findall('port'):
                        port_num = port.get('portid')
                        protocol = port.get('protocol')
                        
                        state_elem = port.find('state')
                        state = state_elem.get('state') if state_elem is not None else 'unknown'
                        
                        service_elem = port.find('service')
                        service_name = ''
                        service_version = ''
                        if service_elem is not None:
                            service_name = service_elem.get('name', '')
                            service_version = service_elem.get('version', '')
                        
                        cursor.execute("""
                            INSERT INTO ports (host_id, port, protocol, state, service, version) 
                            VALUES (?, ?, ?, ?, ?, ?)
                        """, (host_id, int(port_num), protocol, state, service_name, service_version))
        
        conn.commit()
        conn.close()
        print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {xml_file} -> {db_file}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    convert_nmap_to_sqlite()
'''
        
        converter_path = self.grafana_data_dir / "nmap-to-sqlite.py"
        with open(converter_path, 'w') as f:
            f.write(converter_content)
        os.chmod(converter_path, 0o755)
        self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π nmap-to-sqlite.py")

    def _parse_nmap_xml(self, xml_file: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Nmap"""
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            
            ports = []
            services = []
            
            for host in root.findall('host'):
                for port_elem in host.findall('.//port'):
                    port_num = port_elem.get('portid')
                    protocol = port_elem.get('protocol')
                    
                    state_elem = port_elem.find('state')
                    state = state_elem.get('state') if state_elem is not None else 'unknown'
                    
                    service_elem = port_elem.find('service')
                    if service_elem is not None:
                        service_name = service_elem.get('name', 'unknown')
                        service_version = service_elem.get('version', '')
                        service_product = service_elem.get('product', '')
                        
                        port_info = {
                            'port': int(port_num),
                            'protocol': protocol,
                            'state': state,
                            'service': service_name,
                            'version': service_version,
                            'product': service_product
                        }
                        ports.append(port_info)
                        
                        if service_name != 'unknown':
                            services.append({
                                'port': int(port_num),
                                'service': service_name,
                                'version': f"{service_product} {service_version}".strip()
                            })
            
            self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(ports)}, —Å–µ—Ä–≤–∏—Å–æ–≤: {len(services)}")
            return {'ports': ports, 'services': services}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            return {'ports': [], 'services': []}

    def save_results(self, results: dict) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results_file = f"{self.results_dir}/scan_results_{self.scan_id}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        return results_file

async def main():
    if len(os.sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 enhanced_scanner_v5_fixed.py <target>")
        return
        
    target = os.sys.argv[1]
    scanner = AKUMAEnhancedScannerV5Fixed()
    
    print(f"üî• AKUMA Enhanced Scanner v5.0 FIXED")
    print(f"üéØ –¶–µ–ª—å: {target}")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    print("=" * 60)
    
    results = await scanner.scan_target(target)
    results_file = scanner.save_results(results)
    
    print("=" * 60)
    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: {len(results['ports'])}")
    print(f"üîó Webhook URL: {results['webhook_info']['url']}")
    print(f"üìä Grafana –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if results['grafana_integration'] else '‚ùå'}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")

if __name__ == "__main__":
    asyncio.run(main())
