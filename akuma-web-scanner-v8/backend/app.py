#!/usr/bin/env python3
"""
AKUMA Scanner v8 Backend
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 6-—ç—Ç–∞–ø–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import subprocess
import os
import json
import uuid
import tempfile
from datetime import datetime
import asyncio
import xml.etree.ElementTree as ET
import re
import threading
import time

app = FastAPI(title="AKUMA Scanner v8 API", version="8.0.0")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ë–î)
scan_results = {}
scan_statuses = {}

# ==================== MODELS ====================

class ScanCreate(BaseModel):
    name: str
    targets: List[str]
    modules: List[str] = ["nmap", "httpx", "whatweb", "nuclei"]

class ScanResponse(BaseModel):
    id: str
    name: str
    targets: List[str]
    modules: List[str]
    status: str
    created_at: str

# ==================== ROUTES ====================

@app.post("/upload-targets")
async def upload_targets(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ç–∞—Ä–≥–µ—Ç–∞–º–∏"""
    try:
        content = await file.read()
        targets = []
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª (—Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω —Ç–∞—Ä–≥–µ—Ç)
        lines = content.decode('utf-8').strip().split('\n')
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                targets.append(line)
        
        return {"targets": targets}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.post("/scans", response_model=ScanResponse)
async def create_scan(scan: ScanCreate, background_tasks: BackgroundTasks):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∞"""
    try:
        scan_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞–Ω–µ
        scan_info = {
            "id": scan_id,
            "name": scan.name,
            "targets": scan.targets,
            "modules": scan.modules,
            "status": "starting",
            "created_at": datetime.now().isoformat(),
            "results": {},
            "progress": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        }
        
        scan_results[scan_id] = scan_info
        scan_statuses[scan_id] = "starting"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_full_scan_pipeline, args=(scan_id, scan.targets, scan.modules))
        thread.daemon = True
        thread.start()
        
        return ScanResponse(**scan_info)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞: {str(e)}")

@app.get("/scans/{scan_id}")
async def get_scan(scan_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∞"""
    if scan_id not in scan_results:
        raise HTTPException(status_code=404, detail="–°–∫–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return scan_results[scan_id]

@app.get("/scans")
async def list_scans():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∞–Ω–æ–≤"""
    return list(scan_results.values())

@app.get("/stats")
async def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    total_scans = len(scan_results)
    active_scans = len([s for s in scan_results.values() if s["status"] == "running"])
    completed_scans = len([s for s in scan_results.values() if s["status"] == "completed"])
    
    # –ü–æ–¥—Å—á–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    total_vulns = 0
    for scan in scan_results.values():
        for target_result in scan.get("results", {}).values():
            nuclei_results = target_result.get("nuclei", {})
            if "vulnerabilities" in nuclei_results:
                total_vulns += len(nuclei_results["vulnerabilities"])
    
    # –ü–æ–¥—Å—á–µ—Ç —Ü–µ–ª–µ–π
    total_targets = sum(len(scan.get("targets", [])) for scan in scan_results.values())
    
    return {
        "total_scans": total_scans,
        "active_scans": active_scans,
        "completed_scans": completed_scans,
        "total_vulnerabilities": total_vulns,
        "total_targets": total_targets
    }

# ==================== SCANNING FUNCTIONS ====================

def run_full_scan_pipeline(scan_id: str, targets: List[str], modules: List[str]):
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - 6 —ç—Ç–∞–ø–æ–≤"""
    try:
        scan_results[scan_id]["status"] = "running"
        scan_results[scan_id]["progress"] = "–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è..."
        results = {}
        
        for i, target in enumerate(targets):
            print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target} ({i+1}/{len(targets)})")
            scan_results[scan_id]["progress"] = f"–°–∫–∞–Ω–∏—Ä—É–µ–º {target} ({i+1}/{len(targets)})"
            
            target_results = {}
            
            # –≠—Ç–∞–ø 1: Ping —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            scan_results[scan_id]["progress"] = f"Ping {target}..."
            ping_alive = ping_scan(target)
            target_results["ping"] = {"status": "alive" if ping_alive else "dead"}
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ ping –Ω–µ –ø—Ä–æ—à–µ–ª!
            print(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º nmap –¥–ª—è {target} (ping: {'‚úÖ' if ping_alive else '‚ùå'})")
            
            # –≠—Ç–∞–ø 2: Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º)
            if "nmap" in modules:
                scan_results[scan_id]["progress"] = f"Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target}..."
                nmap_results = run_nmap_scan(target)
                target_results["nmap"] = nmap_results
                print(f"üîç Nmap –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {target}: {len(nmap_results.get('open_ports', []))} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤")
                
                # –≠—Ç–∞–ø 3: HTTPx –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
                if "httpx" in modules:
                    scan_results[scan_id]["progress"] = f"HTTPx —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target}..."
                    print(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º httpx –¥–ª—è {target}")
                    httpx_results = run_httpx_scan(target, nmap_results.get("open_ports", []))
                    target_results["httpx"] = httpx_results
                    web_services = httpx_results.get("web_services", [])
                    print(f"üåê HTTPx –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {target}: –Ω–∞–π–¥–µ–Ω–æ {len(web_services)} –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤")
                    
                    # –≠—Ç–∞–ø 4: WhatWeb –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                    if "whatweb" in modules and web_services:
                        scan_results[scan_id]["progress"] = f"WhatWeb –∞–Ω–∞–ª–∏–∑ {target}..."
                        print(f"üîé –ó–∞–ø—É—Å–∫–∞–µ–º whatweb –¥–ª—è {target}")
                        whatweb_results = run_whatweb_scan(web_services)
                        target_results["whatweb"] = whatweb_results
                        
                        # –≠—Ç–∞–ø 5: Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        if "nuclei" in modules:
                            scan_results[scan_id]["progress"] = f"Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target}..."
                            print(f"üí• –ó–∞–ø—É—Å–∫–∞–µ–º nuclei –¥–ª—è {target}")
                            nuclei_results = run_nuclei_scan(web_services)
                            target_results["nuclei"] = nuclei_results
                            vulns = nuclei_results.get("vulnerabilities", [])
                            print(f"üí• Nuclei –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {target}: –Ω–∞–π–¥–µ–Ω–æ {len(vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                            
                            # –≠—Ç–∞–ø 6: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã (Bitrix/WordPress)
                            scan_results[scan_id]["progress"] = f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {target}..."
                            run_specialized_scans(target, whatweb_results, target_results)
            
            results[target] = target_results
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ö–æ–¥—É
            scan_results[scan_id]["results"] = results
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        scan_results[scan_id]["results"] = results
        scan_results[scan_id]["status"] = "completed"
        scan_results[scan_id]["progress"] = "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        print(f"üéâ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {scan_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {scan_id}: {str(e)}")
        scan_results[scan_id]["status"] = "error"
        scan_results[scan_id]["error"] = str(e)
        scan_results[scan_id]["progress"] = f"–û—à–∏–±–∫–∞: {str(e)}"

def ping_scan(target: str) -> bool:
    """–≠—Ç–∞–ø 1: Ping —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        result = subprocess.run(['ping', '-c', '1', '-W', '3', target], 
                              capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except:
        return False

def run_nmap_scan(target: str) -> Dict:
    """–≠—Ç–∞–ø 2: Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs("/tmp/akuma_results", exist_ok=True)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cmd = [
            'nmap', '-sV', '-Pn', '-T4', 
            '--top-ports', '1000', '--open', 
            '--min-rate=1000', '--max-retries=1',
            '--script=http-title,ssl-cert',
            '-oX', f'/tmp/akuma_results/nmap_{target.replace(".", "_")}.xml',
            target
        ]
        
        print(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=180)
        
        # –ü–∞—Ä—Å–∏–º XML —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        open_ports = []
        xml_file = f'/tmp/akuma_results/nmap_{target.replace(".", "_")}.xml'
        
        if os.path.exists(xml_file):
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                
                for host in root.findall('host'):
                    for port in host.findall('.//port'):
                        if port.find('state').get('state') == 'open':
                            port_num = port.get('portid')
                            service = port.find('service')
                            service_name = service.get('name') if service is not None else 'unknown'
                            open_ports.append({
                                'port': int(port_num),
                                'service': service_name
                            })
            except Exception as parse_error:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {parse_error}")
        
        return {
            "status": "completed" if result.returncode == 0 else "error",
            "open_ports": open_ports,
            "command": ' '.join(cmd),
            "output": result.stdout[:500] if result.stdout else "",
            "error": result.stderr[:500] if result.stderr else ""
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def run_httpx_scan(target: str, open_ports: List[Dict]) -> Dict:
    """–≠—Ç–∞–ø 3: HTTPx —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        web_services = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ–±-–ø–æ—Ä—Ç—ã –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
        ports_to_check = [80, 443, 8080, 8443]
        for port_info in open_ports:
            port = port_info['port']
            if port not in ports_to_check:
                ports_to_check.append(port)
        
        for port in ports_to_check:
            for scheme in ['http', 'https']:
                url = f"{scheme}://{target}:{port}"
                try:
                    cmd = ['httpx', '-u', url, '-silent', '-status-code', '-title', '-timeout', '10']
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        web_services.append({
                            'url': url,
                            'status': 'active',
                            'details': result.stdout.strip()
                        })
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–µ–±-—Å–µ—Ä–≤–∏—Å: {url}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ httpx –¥–ª—è {url}: {e}")
                    continue
        
        return {
            "status": "completed",
            "web_services": web_services
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def run_whatweb_scan(web_services: List[Dict]) -> Dict:
    """–≠—Ç–∞–ø 4: WhatWeb —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        technologies = {}
        
        for service in web_services:
            url = service['url']
            try:
                cmd = ['whatweb', '--color=never', '--quiet', '--no-errors', url]
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    technologies[url] = {
                        'status': 'completed',
                        'technologies': result.stdout.strip()
                    }
                    print(f"üîé WhatWeb –¥–ª—è {url}: {result.stdout.strip()[:100]}")
                else:
                    technologies[url] = {'status': 'error', 'error': result.stderr}
            except Exception as e:
                technologies[url] = {'status': 'error', 'error': str(e)}
        
        return {
            "status": "completed",
            "technologies": technologies
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def run_nuclei_scan(web_services: List[Dict]) -> Dict:
    """–≠—Ç–∞–ø 5: Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        vulnerabilities = []
        
        if not web_services:
            return {"status": "completed", "vulnerabilities": []}
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
            for service in web_services:
                f.write(service['url'] + '\n')
            targets_file = f.name
        
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ nuclei
            cmd = [
                'nuclei', '-l', targets_file, '-silent', '-jsonl',
                '-severity', 'critical,high,medium',
                '-rate-limit', '10', '-timeout', '5'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã nuclei
            templates_paths = ['/root/nuclei-templates/', '/usr/share/nuclei-templates/', './nuclei-templates/']
            for templates_path in templates_paths:
                if os.path.exists(templates_path):
                    cmd.extend(['-t', templates_path])
                    break
            
            print(f"üí• –ó–∞–ø—É—Å–∫–∞–µ–º nuclei: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            # –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if result.stdout:
                for line in result.stdout.strip().split('\n'):
                    if line.strip():
                        try:
                            vuln = json.loads(line)
                            vulnerabilities.append({
                                'template_id': vuln.get('template-id', 'unknown'),
                                'info': vuln.get('info', {}),
                                'matched_at': vuln.get('matched-at', ''),
                                'severity': vuln.get('info', {}).get('severity', 'unknown')
                            })
                        except json.JSONDecodeError:
                            continue
        finally:
            try:
                os.unlink(targets_file)
            except:
                pass
        
        return {
            "status": "completed",
            "vulnerabilities": vulnerabilities,
            "command": ' '.join(cmd)
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def run_specialized_scans(target: str, whatweb_results: Dict, target_results: Dict):
    """–≠—Ç–∞–ø 6: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Bitrix –∏–ª–∏ WordPress
        for url, tech_info in whatweb_results.get("technologies", {}).items():
            tech_output = tech_info.get("technologies", "").lower()
            
            # Bitrix —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if "bitrix" in tech_output:
                print(f"üü† –ù–∞–π–¥–µ–Ω Bitrix –Ω–∞ {url}, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                target_results["bitrix_scan"] = run_bitrix_scan(url)
            
            # WordPress —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if "wordpress" in tech_output or "wp-" in tech_output:
                print(f"üîµ –ù–∞–π–¥–µ–Ω WordPress –Ω–∞ {url}, –∑–∞–ø—É—Å–∫–∞–µ–º WPScan")
                target_results["wordpress_scan"] = run_wordpress_scan(url)
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def run_bitrix_scan(url: str) -> Dict:
    """Bitrix —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å check_bitrix
        return {
            "status": "completed",
            "url": url,
            "scan_type": "bitrix",
            "note": "Bitrix scanner integration needed - –¥–æ–±–∞–≤–∏—Ç—å check_bitrix"
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

def run_wordpress_scan(url: str) -> Dict:
    """WordPress —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WPScan"""
    try:
        cmd = [
            'wpscan', '--url', url, '-e', 'vp',
            '--api-token', '7xSvi2jEhfZyHeEnOLXeWxmskjQbwsOCTHXlrzzq6Is',
            '--format', 'json', '--no-banner'
        ]
        
        print(f"üîµ –ó–∞–ø—É—Å–∫–∞–µ–º WPScan: {' '.join(cmd[:4])}...")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            try:
                wp_results = json.loads(result.stdout)
                return {
                    "status": "completed",
                    "url": url,
                    "scan_type": "wordpress",
                    "results": wp_results
                }
            except json.JSONDecodeError:
                return {
                    "status": "completed",
                    "url": url,
                    "scan_type": "wordpress",
                    "raw_output": result.stdout[:1000]
                }
        else:
            return {"status": "error", "error": result.stderr[:500]}
            
    except Exception as e:
        return {"status": "error", "error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
