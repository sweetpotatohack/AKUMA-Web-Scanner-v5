import React, { useState, useEffect } from 'react';
import './App.css';

const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000';
const GRAFANA_URL = process.env.REACT_APP_GRAFANA_URL || 'http://localhost:3000';

function App() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [scans, setScans] = useState([]);
  const [stats, setStats] = useState({});
  const [selectedScan, setSelectedScan] = useState(null);
  const [loading, setLoading] = useState(false);
  const [notifications, setNotifications] = useState({
    telegram_chat_id: '',
    email: '',
    enable_telegram: false,
    enable_email: false,
    enable_critical_alerts: true
  });
  const [formData, setFormData] = useState({
    name: '',
    targets: '',
    scan_type: 'ultimate'
  });

  // Fetch data
  const fetchScans = async () => {
    try {
      const response = await fetch(`${API_BASE}/api/scans`);
      const data = await response.json();
      setScans(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∞–Ω–æ–≤:', error);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await fetch(`${API_BASE}/api/stats`);
      const data = await response.json();
      setStats(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  useEffect(() => {
    fetchScans();
    fetchStats();
    const interval = setInterval(() => {
      fetchScans();
      fetchStats();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  // Create new scan
  const createScan = async (scanData) => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/api/scans`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(scanData),
      });
      
      if (response.ok) {
        await fetchScans();
        setActiveTab('scans');
        alert('‚úÖ –°–∫–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∞');
    }
    setLoading(false);
  };

  // Delete scan
  const deleteScan = async (scanId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–∞–Ω?')) {
      try {
        const response = await fetch(`${API_BASE}/api/scans/${scanId}`, {
          method: 'DELETE',
        });
        
        if (response.ok) {
          await fetchScans();
          if (selectedScan && selectedScan.id === scanId) {
            setSelectedScan(null);
          }
          alert('‚úÖ –°–∫–∞–Ω —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
          alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∞');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∞');
      }
    }
  };

  // Update notification settings
  const updateNotifications = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/api/notifications/settings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notifications),
      });
      
      if (response.ok) {
        alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    setLoading(false);
  };

  // Test notifications
  const testNotifications = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/api/notifications/test`);
      const result = await response.json();
      
      alert(`üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\nüì± Telegram: ${result.telegram}\nüìß Email: ${result.email}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    setLoading(false);
  };

  const TabButton = ({ id, children, active, onClick }) => (
    <button
      className={`tab-button ${active ? 'active' : ''}`}
      onClick={() => onClick(id)}
    >
      {children}
    </button>
  );

  const renderDashboard = () => (
    <div className="dashboard">
      <h1>üöÄ AKUMA Web Scanner v6.5</h1>
      <div className="subtitle">–£–ª—É—á—à–µ–Ω–Ω—ã–π –ê—Ä—Å–µ–Ω–∞–ª –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</div>
      
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-number">{stats.total_scans || 0}</div>
          <div className="stat-label">–í—Å–µ–≥–æ –°–∫–∞–Ω–æ–≤</div>
        </div>
        <div className="stat-card running">
          <div className="stat-number">{stats.running_scans || 0}</div>
          <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –°–∫–∞–Ω–æ–≤</div>
        </div>
        <div className="stat-card completed">
          <div className="stat-number">{stats.completed_scans || 0}</div>
          <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –°–∫–∞–Ω–æ–≤</div>
        </div>
        <div className="stat-card vulnerabilities">
          <div className="stat-number">{stats.total_vulnerabilities || 0}</div>
          <div className="stat-label">–í—Å–µ–≥–æ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π</div>
        </div>
        <div className="stat-card critical">
          <div className="stat-number">{stats.critical_vulnerabilities || 0}</div>
          <div className="stat-label">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π</div>
        </div>
      </div>

      <div className="quick-actions">
        <button className="action-button primary" onClick={() => setActiveTab('new-scan')}>
          üéØ –ù–æ–≤—ã–π –°–∫–∞–Ω
        </button>
        <button className="action-button" onClick={() => setActiveTab('scans')}>
          üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–∫–∞–Ω–∞–º–∏
        </button>
        <button className="action-button" onClick={() => window.open(GRAFANA_URL, '_blank')}>
          üìä –û—Ç–∫—Ä—ã—Ç—å Grafana
        </button>
        <button className="action-button" onClick={() => setActiveTab('notifications')}>
          üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </button>
      </div>
    </div>
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    const targets = formData.targets.split('\n').filter(t => t.trim());
    if (targets.length === 0) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å');
      return;
    }
    createScan({
      name: formData.name,
      targets: targets,
      scan_type: formData.scan_type,
      scan_options: {
        modules: ['nmap', 'nuclei', 'subdomain_enum', 'directory_fuzzing']
      }
    });
  };

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const uploadFormData = new FormData();
    uploadFormData.append('file', file);

    try {
      const response = await fetch(`${API_BASE}/api/scans/upload`, {
        method: 'POST',
        body: uploadFormData,
      });

      if (response.ok) {
        const result = await response.json();
        setFormData(prev => ({
          ...prev,
          targets: result.targets.join('\n')
        }));
        alert(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.count} —Ü–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞`);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    }
  };

  const renderNewScan = () => (
    <div className="new-scan">
      <h2>üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ù–æ–≤–æ–≥–æ –°–∫–∞–Ω–∞</h2>
      <form onSubmit={handleSubmit} className="scan-form">
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –°–∫–∞–Ω–∞:</label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∞"
            required
          />
        </div>

        <div className="form-group">
          <label>–¢–∏–ø –°–∫–∞–Ω–∞:</label>
          <select
            value={formData.scan_type}
            onChange={(e) => setFormData({...formData, scan_type: e.target.value})}
          >
            <option value="ultimate">üöÄ –ü–æ–ª–Ω—ã–π –°–∫–∞–Ω</option>
            <option value="quick">‚ö° –ë—ã—Å—Ç—Ä—ã–π –°–∫–∞–Ω</option>
            <option value="deep">üîç –ì–ª—É–±–æ–∫–∏–π –°–∫–∞–Ω</option>
          </select>
        </div>

        <div className="form-group">
          <label>–¶–µ–ª–∏ (–æ–¥–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É):</label>
          <textarea
            value={formData.targets}
            onChange={(e) => setFormData({...formData, targets: e.target.value})}
            placeholder="https://example.com&#10;192.168.1.1&#10;subdomain.example.com"
            rows="6"
            required
          />
        </div>

        <div className="form-group">
          <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ü–µ–ª—è–º–∏:</label>
          <input
            type="file"
            accept=".txt,.csv"
            onChange={handleFileUpload}
          />
          <small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .txt –∏ .csv</small>
        </div>

        <button type="submit" className="submit-button" disabled={loading}>
          {loading ? 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –°–∫–∞–Ω'}
        </button>
      </form>
    </div>
  );

  const renderNotifications = () => (
    <div className="notifications">
      <h2>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
      
      <div className="notification-form">
        <div className="form-section">
          <h3>üì± Telegram –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          <div className="form-group">
            <label>
              <input
                type="checkbox"
                checked={notifications.enable_telegram}
                onChange={(e) => setNotifications({
                  ...notifications,
                  enable_telegram: e.target.checked
                })}
              />
              –í–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </label>
          </div>
          <div className="form-group">
            <label>Telegram Chat ID:</label>
            <input
              type="text"
              value={notifications.telegram_chat_id}
              onChange={(e) => setNotifications({
                ...notifications,
                telegram_chat_id: e.target.value
              })}
              placeholder="–í–∞—à Telegram Chat ID"
            />
            <small>
              üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Chat ID: <br/>
              1. –ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å @userinfobot –≤ Telegram<br/>
              2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID
            </small>
          </div>
        </div>

        <div className="form-section">
          <h3>üìß Email –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          <div className="form-group">
            <label>
              <input
                type="checkbox"
                checked={notifications.enable_email}
                onChange={(e) => setNotifications({
                  ...notifications,
                  enable_email: e.target.checked
                })}
              />
              –í–∫–ª—é—á–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </label>
          </div>
          <div className="form-group">
            <label>Email –ê–¥—Ä–µ—Å:</label>
            <input
              type="email"
              value={notifications.email}
              onChange={(e) => setNotifications({
                ...notifications,
                email: e.target.value
              })}
              placeholder="your@email.com"
            />
          </div>
        </div>

        <div className="form-section">
          <h3>‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –û–ø–æ–≤–µ—â–µ–Ω–∏–π</h3>
          <div className="form-group">
            <label>
              <input
                type="checkbox"
                checked={notifications.enable_critical_alerts}
                onChange={(e) => setNotifications({
                  ...notifications,
                  enable_critical_alerts: e.target.checked
                })}
              />
              –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
            </label>
          </div>
        </div>

        <div className="form-actions">
          <button 
            className="submit-button" 
            onClick={updateNotifications}
            disabled={loading}
          >
            {loading ? 'üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </button>
          <button 
            className="test-button" 
            onClick={testNotifications}
            disabled={loading}
          >
            {loading ? 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
          </button>
        </div>
      </div>

      <div className="notification-info">
        <h3>üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –û–∫—Ä—É–∂–µ–Ω–∏—è</h3>
        <p>–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</p>
        <div className="env-vars">
          <code>TELEGRAM_BOT_TOKEN=your_bot_token</code><br/>
          <code>SMTP_HOST=smtp.gmail.com</code><br/>
          <code>SMTP_PORT=587</code><br/>
          <code>SMTP_USER=your_email@gmail.com</code><br/>
          <code>SMTP_PASSWORD=your_app_password</code><br/>
        </div>
      </div>
    </div>
  );

  const renderScans = () => (
    <div className="scans">
      <h2>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°–∫–∞–Ω–∞–º–∏</h2>
      {scans.length === 0 ? (
        <div style={{textAlign: 'center', padding: '40px', color: 'rgba(0,255,255,0.7)'}}>
          <h3>üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–æ–≤</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–∫–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
        </div>
      ) : (
        <div className="scans-grid">
          {scans.map(scan => (
            <div key={scan.id} className={`scan-card status-${scan.status}`}>
              <div className="scan-header">
                <h3>{scan.name}</h3>
                <div className="scan-actions">
                  <button onClick={() => setSelectedScan(scan)} className="view-button">
                    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                  </button>
                  <button onClick={() => deleteScan(scan.id)} className="delete-button">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
              <div className="scan-info">
                <div>–°—Ç–∞—Ç—É—Å: <span className={`status-badge ${scan.status}`}>
                  {scan.status === 'running' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : 
                   scan.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                   scan.status === 'failed' ? '–û—à–∏–±–∫–∞' : scan.status}
                </span></div>
                <div>–ü—Ä–æ–≥—Ä–µ—Å—Å: {scan.progress}%</div>
                <div>–¶–µ–ª–µ–π: {scan.targets.length}</div>
                <div>–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {scan.vulnerabilities.length}</div>
              </div>
              {scan.status === 'running' && (
                <div className="progress-bar">
                  <div className="progress-fill" style={{width: `${scan.progress}%`}}></div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {selectedScan && (
        <div className="scan-details-modal" onClick={() => setSelectedScan(null)}>
          <div className="scan-details" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üîç –î–µ—Ç–∞–ª–∏ –°–∫–∞–Ω–∞: {selectedScan.name}</h3>
              <button onClick={() => setSelectedScan(null)} className="close-button">‚úñÔ∏è</button>
            </div>
            <div className="modal-content">
              <div className="scan-meta">
                <div><strong>ID:</strong> {selectedScan.id}</div>
                <div><strong>–°—Ç–∞—Ç—É—Å:</strong> <span className={`status-badge ${selectedScan.status}`}>
                  {selectedScan.status === 'running' ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : 
                   selectedScan.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                   selectedScan.status === 'failed' ? '–û—à–∏–±–∫–∞' : selectedScan.status}
                </span></div>
                <div><strong>–°–æ–∑–¥–∞–Ω:</strong> {new Date(selectedScan.created_at).toLocaleString()}</div>
                <div><strong>–¢–∏–ø:</strong> {selectedScan.scan_type}</div>
                <div><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å:</strong> {selectedScan.progress}%</div>
              </div>

              <div className="targets-section">
                <h4>üéØ –¶–µ–ª–∏ ({selectedScan.targets.length})</h4>
                <div className="targets-list">
                  {selectedScan.targets.map((target, index) => (
                    <span key={index} className="target-tag">{target}</span>
                  ))}
                </div>
              </div>

              <div className="vulnerabilities-section">
                <h4>üö® –£—è–∑–≤–∏–º–æ—Å—Ç–∏ ({selectedScan.vulnerabilities.length})</h4>
                {selectedScan.vulnerabilities.length === 0 ? (
                  <p style={{color: 'rgba(255,255,255,0.6)', textAlign: 'center', padding: '20px'}}>
                    –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —Å–∫–∞–Ω –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                  </p>
                ) : (
                  <div className="vulnerabilities-list">
                    {selectedScan.vulnerabilities.map(vuln => (
                      <div key={vuln.id} className={`vulnerability-item severity-${vuln.severity}`}>
                        <div className="vuln-header">
                          <span className={`severity-badge ${vuln.severity}`}>
                            {vuln.severity === 'critical' ? '–ö–†–ò–¢–ò–ß–ù–ê–Ø' :
                             vuln.severity === 'high' ? '–í–´–°–û–ö–ê–Ø' :
                             vuln.severity === 'medium' ? '–°–†–ï–î–ù–Ø–Ø' :
                             vuln.severity === 'low' ? '–ù–ò–ó–ö–ê–Ø' : vuln.severity.toUpperCase()}
                          </span>
                          <span className="vuln-title">{vuln.title}</span>
                          <span className="cvss-score">CVSS: {vuln.cvss}</span>
                        </div>
                        <div className="vuln-description">{vuln.description}</div>
                        <div className="vuln-tool">–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {vuln.tool}</div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className="App">
      <nav className="navbar">
        <div className="nav-brand">
          <span className="brand-icon">üíÄ</span>
          <span className="brand-text">AKUMA v6.5</span>
        </div>
        <div className="nav-tabs">
          <TabButton id="dashboard" active={activeTab === 'dashboard'} onClick={setActiveTab}>
            üè† –ü–∞–Ω–µ–ª—å
          </TabButton>
          <TabButton id="new-scan" active={activeTab === 'new-scan'} onClick={setActiveTab}>
            üéØ –ù–æ–≤—ã–π –°–∫–∞–Ω
          </TabButton>
          <TabButton id="scans" active={activeTab === 'scans'} onClick={setActiveTab}>
            üìã –°–∫–∞–Ω—ã
          </TabButton>
          <TabButton id="notifications" active={activeTab === 'notifications'} onClick={setActiveTab}>
            üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </TabButton>
        </div>
      </nav>

      <main className="main-content">
        {activeTab === 'dashboard' && renderDashboard()}
        {activeTab === 'new-scan' && renderNewScan()}
        {activeTab === 'scans' && renderScans()}
        {activeTab === 'notifications' && renderNotifications()}
      </main>
    </div>
  );
}

export default App;
