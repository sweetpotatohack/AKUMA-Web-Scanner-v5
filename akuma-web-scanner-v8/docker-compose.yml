version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: akuma-postgres-v6
    environment:
      POSTGRES_DB: akuma_scanner
      POSTGRES_USER: akuma_user
      POSTGRES_PASSWORD: akuma_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U akuma_user -d akuma_scanner"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: akuma-redis-v6
    ports:
      - "6379:6379"
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: akuma-backend-v6
    environment:
      - DATABASE_URL=postgresql://akuma_user:akuma_password_2024@postgres:5432/akuma_scanner
      - REDIS_URL=redis://redis:6379/0
      - SCANNER_URL=http://akuma-scanner-v6:5000
      # Notification settings - customize these
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  scanner:
    build:
      context: ./scanner
      dockerfile: Dockerfile
    container_name: akuma-scanner-v6
    environment:
      - BACKEND_URL=http://akuma-backend-v6:8000
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5000:5000"
    depends_on:
      - redis
    networks:
      - akuma-network
    volumes:
      - scanner_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: akuma-frontend-v6
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_GRAFANA_URL=http://localhost:3000
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: akuma-grafana-v6
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=akuma2024
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - akuma-network

  prometheus:
    image: prom/prometheus:latest
    container_name: akuma-prometheus-v6
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - akuma-network

  nginx:
    image: nginx:alpine
    container_name: akuma-nginx-v6
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
      - grafana
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
  scanner_data:

networks:
  akuma-network:
    driver: bridge
