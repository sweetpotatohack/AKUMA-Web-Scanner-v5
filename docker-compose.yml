services:
  # Frontend React App
  akuma-frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - akuma-backend
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  # Backend FastAPI + WebSockets
  akuma-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://akuma:akuma_password_2024@postgres:5432/akuma_scanner
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-akuma-key-here
      - ENVIRONMENT=development
      - MAX_PARALLEL_SCANS=10
      - SCAN_TIMEOUT=3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - akuma-network
    volumes:
      - akuma-scan-results:/app/scan_results
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=akuma_scanner
      - POSTGRES_USER=akuma
      - POSTGRES_PASSWORD=akuma_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U akuma"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - akuma-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      
  # Celery Worker for background tasks
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://akuma:akuma_password_2024@postgres:5432/akuma_scanner
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-akuma-key-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - akuma-network
    volumes:
      - akuma-scan-results:/app/scan_results
    
  # Celery Beat for scheduled tasks (optional)
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://akuma:akuma_password_2024@postgres:5432/akuma_scanner
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-akuma-key-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - akuma-network
    profiles:
      - full
      
  # Flower for monitoring Celery (optional)
  flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://akuma:akuma_password_2024@postgres:5432/akuma_scanner
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - akuma-network
    profiles:
      - full
      
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      akuma-frontend:
        condition: service_healthy
      akuma-backend:
        condition: service_healthy
    networks:
      - akuma-network

volumes:
  postgres_data:
  redis_data:
  akuma-scan-results:

networks:
  akuma-network:
    driver: bridge
